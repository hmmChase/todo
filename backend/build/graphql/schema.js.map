{"version":3,"sources":["../../src/graphql/schema.js"],"names":["development","process","env","NODE_ENV","schema","typeDefs","resolvers","logger","log","e","console","allowUndefinedInResolve"],"mappings":";;;;;;;;;AAAA;;AAEA;;AACA;;AAEA;AAEA,IAAMA,WAAW,GAAGC,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,aAA7C;AAEA,IAAMC,MAAM,GAAG,kCAAqB;AAClC;AACA;AACAC,EAAAA,QAAQ,EAARA,oBAHkC;AAKlC;AACAC,EAAAA,SAAS,EAATA,qBANkC;AAQlCC,EAAAA,MAAM,EAAE;AAAEC,IAAAA,GAAG,EAAE,aAAAC,CAAC;AAAA,aAAKT,WAAW,GAAGU,OAAO,CAACF,GAAR,CAAYC,CAAZ,CAAH,GAAoB,IAApC;AAAA;AAAR,GAR0B;AASlCE,EAAAA,uBAAuB,EAAE,CAACX;AATQ,CAArB,CAAf;eAYeI,M","sourcesContent":["import { makeExecutableSchema } from '@graphql-tools/schema';\r\n\r\nimport typeDefs from './typeDefs';\r\nimport resolvers from './resolvers';\r\n\r\n// https://www.graphql-tools.com/docs/generate-schema/#makeexecutableschemaoptions\r\n\r\nconst development = process.env.NODE_ENV === 'development';\r\n\r\nconst schema = makeExecutableSchema({\r\n  // Type definitions define the \"shape\" of your data and specify\r\n  // which ways the data can be fetched from the GraphQL server.\r\n  typeDefs,\r\n\r\n  // Resolvers define the technique for fetching the types in the schema.\r\n  resolvers,\r\n\r\n  logger: { log: e => (development ? console.log(e) : null) },\r\n  allowUndefinedInResolve: !development\r\n});\r\n\r\nexport default schema;\r\n"],"file":"schema.js"}