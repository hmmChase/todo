{"version":3,"sources":["../../src/utils/validation.js"],"names":["isEmailWellFormed","email","isvalid","isEmail","validate","UserInputError","error","isPasswordWellFormed","password","tooShort","length","passwordMinLength","tooLong","passwordMaxLength","isPasswordValid","inputPassword","hashedPassword","bcrypt","compare","isCorrectPass"],"mappings":";;;;;;;;;;;;;AAAA;;AACA;;AACA;;AACA;;AAEA;AAEO,IAAMA,iBAAiB,GAAG,SAApBA,iBAAoB,CAAAC,KAAK,EAAI;AACxC,MAAMC,OAAO,GAAGC,oBAAQC,QAAR,CAAiBH,KAAjB,CAAhB;;AAEA,MAAI,CAACC,OAAL,EAAc,MAAM,IAAIG,mCAAJ,CAAmB;AAAEC,IAAAA,KAAK,EAAE;AAAT,GAAnB,CAAN;AACf,CAJM;AAMP;;;;;AAEO,IAAMC,oBAAoB,GAAG,SAAvBA,oBAAuB,CAAAC,QAAQ,EAAI;AAC9C;AACF;AACA;AACA;AAEE,MAAMC,QAAQ,GAAGD,QAAQ,CAACE,MAAT,GAAkBC,yBAAnC;AACA,MAAIF,QAAJ,EACE,MAAM,IAAIJ,mCAAJ,uCAC2BM,yBAD3B,iBAAN;AAIF,MAAMC,OAAO,GAAGJ,QAAQ,CAACE,MAAT,GAAkBG,yBAAlC;AACA,MAAID,OAAJ,EACE,MAAM,IAAIP,mCAAJ,2CAC+BQ,yBAD/B,iBAAN;AAGH,CAjBM;;;;AAmBA,IAAMC,eAAe;AAAA,2FAAG,iBAAOC,aAAP,EAAsBC,cAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAGDC,qBAAOC,OAAP,CAAeH,aAAf,EAA8BC,cAA9B,CAHC;;AAAA;AAGvBG,YAAAA,aAHuB;;AAAA,gBAKxBA,aALwB;AAAA;AAAA;AAAA;;AAAA,kBAKH,IAAId,mCAAJ,CAAmB,0BAAnB,CALG;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAfS,eAAe;AAAA;AAAA;AAAA,GAArB","sourcesContent":["import { UserInputError } from 'apollo-server-express';\r\nimport bcrypt from 'bcryptjs';\r\nimport isEmail from 'isemail';\r\nimport { passwordMinLength, passwordMaxLength } from '../config';\r\n\r\n/* Email */\r\n\r\nexport const isEmailWellFormed = email => {\r\n  const isvalid = isEmail.validate(email);\r\n\r\n  if (!isvalid) throw new UserInputError({ error: 'email.invalid' });\r\n};\r\n\r\n/* Password */\r\n\r\nexport const isPasswordWellFormed = password => {\r\n  /*\r\n  https://regexr.com\r\n  - within min & max characters\r\n  */\r\n\r\n  const tooShort = password.length < passwordMinLength;\r\n  if (tooShort)\r\n    throw new UserInputError(\r\n      `Password must have at least ${passwordMinLength} characters`\r\n    );\r\n\r\n  const tooLong = password.length > passwordMaxLength;\r\n  if (tooLong)\r\n    throw new UserInputError(\r\n      `Password must have no more than ${passwordMaxLength} characters`\r\n    );\r\n};\r\n\r\nexport const isPasswordValid = async (inputPassword, hashedPassword) => {\r\n  // const valid = await argon2.verify(hashedPassword, inputPassword);\r\n\r\n  const isCorrectPass = await bcrypt.compare(inputPassword, hashedPassword);\r\n\r\n  if (!isCorrectPass) throw new UserInputError('login.invalidCredentials');\r\n};\r\n"],"file":"validation.js"}