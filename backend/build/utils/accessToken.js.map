{"version":3,"sources":["../../src/utils/accessToken.js"],"names":["createAccessToken","userId","secret","Buffer","from","process","env","ACCESS_TOKEN_SECRET","jwt","sign","options","verifyAccessToken","accessToken","payload","verify","error","console","log","AuthenticationError"],"mappings":";;;;;;;;;AAAA;;AACA;;AAEA;;AAEO,IAAMA,iBAAiB,GAAG,SAApBA,iBAAoB,CAAAC,MAAM,EAAI;AACzC,MAAMC,MAAM,GAAGC,MAAM,CAACC,IAAP,CAAYC,OAAO,CAACC,GAAR,CAAYC,mBAAxB,EAA6C,QAA7C,CAAf;AAEA,SAAOC,yBAAIC,IAAJ,CAAS;AAAER,IAAAA,MAAM,EAANA;AAAF,GAAT,EAAqBC,MAArB,EAA6BQ,eAA7B,CAAP;AACD,CAJM;;;;AAMA,IAAMC,iBAAiB,GAAG,SAApBA,iBAAoB,CAAAC,WAAW,EAAI;AAC9C,MAAMV,MAAM,GAAGC,MAAM,CAACC,IAAP,CAAYC,OAAO,CAACC,GAAR,CAAYC,mBAAxB,EAA6C,QAA7C,CAAf;;AAEA,MAAI;AACF;AACA,QAAMM,OAAO,GAAGL,yBAAIM,MAAJ,CAAWF,WAAX,EAAwBV,MAAxB,CAAhB,CAFE,CAIF;;;AACA,WAAOW,OAAP;AACD,GAND,CAME,OAAOE,KAAP,EAAc;AACdC,IAAAA,OAAO,CAACC,GAAR,CAAY,4BAAZ,EAA0CF,KAA1C,EADc,CAGd;;AACA,UAAM,IAAIG,wCAAJ,CAAwB,yBAAxB,CAAN;AACD;AACF,CAfM","sourcesContent":["import { AuthenticationError } from 'apollo-server-express';\r\nimport jwt from 'jsonwebtoken';\r\n\r\nimport { options } from '../config';\r\n\r\nexport const createAccessToken = userId => {\r\n  const secret = Buffer.from(process.env.ACCESS_TOKEN_SECRET, 'base64');\r\n\r\n  return jwt.sign({ userId }, secret, options);\r\n};\r\n\r\nexport const verifyAccessToken = accessToken => {\r\n  const secret = Buffer.from(process.env.ACCESS_TOKEN_SECRET, 'base64');\r\n\r\n  try {\r\n    // Decode payload if signature is valid and JWT not expired\r\n    const payload = jwt.verify(accessToken, secret);\r\n\r\n    // Return payload\r\n    return payload;\r\n  } catch (error) {\r\n    console.log('verifyAccessToken error : ', error);\r\n\r\n    // If not, throw error\r\n    throw new AuthenticationError('user.invalidCredentials');\r\n  }\r\n};\r\n"],"file":"accessToken.js"}