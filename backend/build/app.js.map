{"version":3,"sources":["../src/app.js"],"names":["production","require","config","process","env","NODE_ENV","app","use","corsOptions","contentSecurityPolicy","undefined","express","json","urlencoded","extended","indexRouter","err","req","res","next","locals","message","error","get","status","apolloServer","start","applyMiddleware","path","graphqlPath","cors","console","exit","hostname","deployedUrl","Promise","resolve","httpServer","listen","port","address","protocol","serverUrl","log"],"mappings":"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","sourcesContent":["/*\r\n\r\nhttps://expressjs.com/en/advanced/best-practice-security.html\r\nhttps://expressjs.com/en/advanced/best-practice-performance.html\r\n\r\n! must re-build server before pushing to vercel\r\n* npm run build\r\n? and start script\r\n\r\n*/\r\n\r\nimport express from 'express';\r\nimport cors from 'cors';\r\nimport helmet from 'helmet';\r\nimport compression from 'compression';\r\nimport cookieParser from 'cookie-parser';\r\nimport logger from 'morgan';\r\n// import createError from 'http-errors';\r\n\r\n// https://github.com/vercel/vercel/discussions/5846\r\nimport 'ts-tiny-invariant';\r\n\r\n// In production, env vars are defined on the host\r\nif (!production) require('dotenv').config();\r\n\r\nimport apolloServer from './graphql/apolloServer';\r\nimport indexRouter from './rest/routes';\r\nimport { port, corsOptions, graphqlPath, deployedUrl } from './config.js';\r\n\r\nconst production = process.env.NODE_ENV === 'production';\r\n\r\nconst app = express();\r\n\r\napp.use(cors(corsOptions));\r\n// https://github.com/graphql/graphql-playground/issues/1283\r\napp.use(helmet({ contentSecurityPolicy: production ? undefined : false }));\r\napp.use(compression());\r\napp.use(express.json());\r\napp.use(express.urlencoded({ extended: false }));\r\napp.use(cookieParser());\r\napp.use(logger(production ? 'combined' : 'dev'));\r\n\r\napp.use('/', indexRouter);\r\n\r\n// // catch 404 and forward to error handler\r\n// app.use((req, res, next) => next(createError(404)));\r\n\r\n// error handler\r\napp.use((err, req, res, next) => {\r\n  // set locals, only providing error in development\r\n  res.locals.message = err.message;\r\n  res.locals.error = req.app.get('env') === 'development' ? err : {};\r\n\r\n  // return the error\r\n  res.status(err.status || 500);\r\n  res.json({ message: err.message, error: err });\r\n});\r\n\r\n// https://www.apollographql.com/docs/apollo-server/api/apollo-server/#start\r\n(async () => {\r\n  try {\r\n    await apolloServer.start();\r\n\r\n    apolloServer.applyMiddleware({ app, path: graphqlPath, cors: corsOptions });\r\n  } catch (error) {\r\n    console.error('An error occurred while starting Apollo Server: ', error);\r\n\r\n    process.exit(1);\r\n  }\r\n})();\r\n\r\n// ./bin/www.js not working on vercel\r\nif (production)\r\n  (async () => {\r\n    try {\r\n      let httpServer;\r\n\r\n      const hostname = deployedUrl || 'localhost';\r\n\r\n      await new Promise(\r\n        resolve => (httpServer = app.listen(port, hostname, resolve))\r\n      );\r\n\r\n      const address = await httpServer.address();\r\n\r\n      const protocol = production ? 'https' : 'http';\r\n\r\n      const serverUrl = `${protocol}://${address.address}:${port}${apolloServer.graphqlPath}`;\r\n\r\n      console.log('ðŸš€ Server ready at', serverUrl);\r\n    } catch (error) {\r\n      console.error('An error occurred while starting the server: ', error);\r\n\r\n      process.exit(1);\r\n    }\r\n  })();\r\n\r\nexport default app;\r\n"],"file":"app.js"}